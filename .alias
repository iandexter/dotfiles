alias rm='rm -i'
alias mv='mv -i'
alias l='ls -lartF'
alias ll='ls -lrt'
alias gpg='gpg2'
alias strings='strings -a'
genrand() {
    [ -z "$1" ] && num=8 || num=$1
    strings /dev/urandom | grep -o '[[:alnum:]]' | head -n $num | tr -d '\n'
    echo
}
genurand() {
    export LC_ALL=C
    echo `</dev/urandom tr -dc 'a-zA-Z0-9~!@#$%^&*()_+{}|[]\:;<>?,./' \
        | head -c $1`
}
wiki() {
	dig +short txt $1.wp.dg.cx
}
logMessage() {
	COMMAND="$*"
	sh -c "${COMMAND} | awk '{
		\"echo \\\"$(date +%b\ %e\ %T) $(hostname) $(basename $0)[$$]:\\\"\"|getline timestamp;
		close(\"echo \\\"$(date +%b\ %e\ %T) $(hostname) $(basename $0)[$$]:\\\"\");
		printf(\"%s %s\n\", timestamp, \$0)
	}'"
}
svnadd() {
	svn add --auto-props $1
	svn propset svn:keywords "Date Id URL Rev Author" $1
}
headtails() {
	[ -z "$2" ] && num='' || num="-n $2"
	head -n ${num} $1
	echo "..."
	tail -n ${num} $1
}
mkcd() {
	[ ! -d $1 ] && mkdir $1 && cd $1
}
newscreen() {
    [ -z "$1" ] && name='DEV' || name="$1"
    unset TMOUT
    screen -S $name -T xterm -U
}
rup() {
    while [[ -n "$1" ]] ; do
    	[[ $1 =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]] && h=$1 \
            || h=$(host $1 | awk '{print $1}')
        echo "${h}: " $(ssh $h uptime)
        shift
    done
}
rtop() {
    [ -z "$2" ] && num='-n 50' || num="-n $2"
    [[ $1 =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]] && h=$1 \
        || h=$(host $1 | awk '{print $1}')
    echo -n "$h: "
    ssh -t $h top -b -n 1 | head ${num}
}
rping() {
    while [[ -n "$1" ]] ; do
    	[[ $1 =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]] && h=$1 \
            || h=$(host $1 | awk '{print $1}')
        if ping -c 1 $h &>/dev/null ; then
            echo "$h is alive"
        else
            echo "$h is dead" && return 1
        fi
        shift
    done
}
ssh-agent-key() {
    eval `ssh-agent` && \
    ssh-add && \
    ssh-add -l
}
rot13() {
    echo "$@" | tr '[a-m][n-z][A-M][N-Z] -' '[n-z][a-m][N-Z][A-M]_+'
}
rdiff() {
    if [[ $# -lt 3 ]] ; then
        echo "rdiff [options] host1 host2 file" && return 1
    else
        if [[ ! "$1" =~ "-" ]] ; then
            diff -bBu <(ssh $1 cat $3) <(ssh $2 cat $3)
        elif [[ "$1" =~ "-c" ]] ; then
            diff -bBu <(ssh $2 cat $4) <(ssh $3 cat $4) \
                | vim -R "+set nonumber" "+syntax on" -
        else
            diff $1 -bB <(ssh $2 cat $4) <(ssh $3 cat $4)
        fi
    fi
}
urlopen() {
    if [[ $# -lt 1 ]] ; then
        echo "urlopen url" && return 1
    else
        /usr/bin/open -a "Google Chrome Canary" $1 --args --incognito
    fi
}
chef_nodes() {
    if [[ $# -lt 1 ]] ; then
        echo "chef_nodes role" && return 1
    else
        /usr/local/bin/knife search -aipaddress role:$1 2>/dev/null | \
            /usr/local/bin/gsed -r 's/\s+//g;s/ipaddress//;s/://g;/^$/d' | \
             paste -d' ' - - | sort -u
    fi
}
gpgrep() {
    if [[ $# -lt 1 ]] ; then
        echo "gpgrep expression" && return 1
    else
        /usr/local/bin/gpg2 -d ~/.crypto/.crypt.gpg 2>/dev/null | \
            grep -iE "$@" | grep -vE 'MOVED|DEPRECATED'
    fi
}
alias gam='python ~/bin/gam/src/gam.py'
alias nossh='LC_ALL=C ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
alias showtunnel="ps -ef | grep '[s]sh -f'"
sshtunnel() {
    if [[ $# -lt 3 ]] ; then
        echo "sshjump jumphost host port" && return 1
    else
        ssh -f ${1} -L ${3}:${2}:${3} -N 2>/dev/null
        echo "SSH tunnel started:"
        showtunnel
    fi
}
killtunnel() {
    if ps -ef | grep -q "[s]sh -f" ; then
        pid=$(ps -ef | awk '/[s]sh -f/ {print $2}')
        kill -9 ${pid}
        [[ $? -eq 0 ]] && echo "Killed SSH tunnel session: ${pid}."
    else
        echo "No SSH tunnel session found." && return 1
    fi
}
weather() {
    [[ $# -lt 1 ]] && echo "weather airportcode" && return 1
    curl wttr.in/$1
}
clearcache() {
    api_url1="http://www.ap-northeast-1.api-hk-v1.compareglobal.co.uk/redis/clear/HK"
    api_url2="http://www.ap-northeast-1.api-hk-v1.compareglobal.co.uk/redis/clear/DK"
    cache_url="http://www.moneyhero.com.hk/Ab5NJ4T8mxQck36pYj"
    curl -sXDELETE "${api_url1}"| grep count
    curl -sXDELETE "${api_url2}"| grep count
    curl -XGET "${cache_url}"
}
awsssh() {
    [[ $# -lt 1 ]] && echo "awsssh jumphost key user ipaddress" && return 1
    LC_ALL=C
    ssh -t ${1} \
        ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" \
        -i /home/iandexter/.ssh/${2}.pem ${3}@${4}
}
urldiff() {
    [[ $# -lt 2 ]] && echo "urldiff url1 url2" && return 1
    diff -q <(curl -s ${1}) <(curl -s ${2})
}
dnstests() {
    [[ $# -lt 1 ]] && echo "dnstests domain [...]" && return 1
    while [[ -n "$1" ]] ; do
        echo ${1}
        echo "dig: " $(dig +short SOA ${1})
        echo "whois: "
        whois ${1}
        echo "curl: " $(curl -sI ${1} | grep Location 2>/dev/null)
        echo '---'
        shift
    done
}
chef_del() {
    [[ $# -lt 1 ]] && echo "chef_del node [...]" && return 1
    while [[ -n "$1" ]] ; do
        knife node delete -y $1
        knife client delete -y $1
        shift
    done
}
geoip() {
    [[ $# -lt 1 ]] && echo "geoip ip.address [...]" && return 1
    while [[ -n "$1" ]] ; do
        curl -s ipinfo.io/$1 | jq -r '[.ip,.country] | @csv'
        shift
    done
}
awsec2id() {
    [[ $# -lt 1 ]] && echo "awsec2id host [..]" && return 1
    while [[ -n "$1" ]] ; do
        echo -n "$(echo $1 | sed 's/\(.*\),.*/\1 /')"
        ssh $1 -C \
            "curl -s http://169.254.169.254/latest/meta-data/instance-id" \
            2>/dev/null
        echo
        shift
    done
}
