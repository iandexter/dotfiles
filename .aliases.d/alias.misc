### MISC
wiki() {
    dig +short txt ${1}.wp.dg.cx
}
logMessage() {
    COMMAND="$*"
    sh -c "${COMMAND} | awk '{
        \"echo \\\"$(date +%b\ %e\ %T) $(hostname) $(basename ${0})[$$]:\\\"\"|getline timestamp;
        close(\"echo \\\"$(date +%b\ %e\ %T) $(hostname) $(basename ${0})[$$]:\\\"\");
        printf(\"%s %s\n\", timestamp, \${0})
    }'"
}
svnadd() {
    svn add --auto-props ${1}
    svn propset svn:keywords "Date Id URL Rev Author" ${1}
}
headtails() {
    [[ $# -lt 1 ]] && echo "$FUNCNAME filename num_lines" && return 1
    head -n ${2:-10} ${1}
    echo -ne "${3:-...\n}"
    tail -n ${2:-10} ${1}
}
mkcd() {
    [ ! -d ${1} ] && mkdir ${1} && cd ${1}
}
newscreen() {
    unset TMOUT
    screen -S ${1:-DEV} -T xterm -U
}
randline() {
    [[ $# -lt 1 ]] && echo "$FUNCNAME filename" && return 1
    head -$(( ${RANDOM} % $( wc -l < ${1} ) + 1 )) ${1} | tail -1
}
rup() {
    while [[ -n "${1}" ]] ; do
    	[[ ${1} =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]] && h=${1} || h=$(host ${1} | awk '{print $1}')
        echo "${h}: " $(ssh ${h} uptime)
        shift
    done
}
rtop() {
    [[ ${1} =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]] && h=${1} || h=$(host ${1} | awk '{print $1}')
    echo -n "${h}: "
    ssh -t ${h} top -b -n 1 | head -n ${2:-10}
}
rping() {
    while [[ -n "${1}" ]] ; do
    	[[ ${1} =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]] && h=${1} || h=$(host ${1} | awk '{print $1}')
        if ping -c 1 ${h} &>/dev/null ; then
            echo "${h} is alive"
        else
            echo "${h} is dead" && return 1
        fi
        shift
    done
}
rot13() {
    echo "$@" | tr '[a-m][n-z][A-M][N-Z] -' '[n-z][a-m][N-Z][A-M]_+'
}
rdiff() {
    if [[ $# -lt 3 ]] ; then
        echo "$FUNCNAME [options] host1 host2 file" && return 1
    else
        if [[ ! "${1}" =~ "-" ]] ; then
            diff -bBu <(ssh ${1} cat ${3}) <(ssh ${2} cat ${3})
        elif [[ "${1}" =~ "-c" ]] ; then
            diff -bBu <(ssh ${2} cat ${4}) <(ssh ${3} cat ${4}) | vim -R "+set nonumber" "+syntax on" -
        else
            diff ${1} -bB <(ssh ${2} cat ${4}) <(ssh ${3} cat ${4})
        fi
    fi
}
urlopen() {
    if [[ $(uname) = 'Darwin' ]] ; then
        if [[ $# -lt 1 ]] ; then
            echo "$FUNCNAME url" && return 1
        else
            /usr/bin/open -a "Google Chrome" ${1} --args --incognito
        fi
    else
        echo "Only available for MacOS" && return 1
    fi
}
weather() {
    [[ $# -lt 1 ]] && echo "$FUNCNAME airportcode" && return 1
    curl wttr.in/${1}
}
urldiff() {
    [[ $# -lt 2 ]] && echo "$FUNCNAME url1 url2" && return 1
    diff -q <(curl -s ${1}) <(curl -s ${2})
}
from_utc() {
    [[ $# -lt 1 ]] && echo "$FUNCNAME \"YYYY-mm-DD HH:MM:SS\"" && return 1
    utc="${1}"
    if [[ $(uname) = 'Darwin' ]] ; then
        date -jf "%Y-%m-%d %H:%M:%S %z" "${utc} +0000" +"%Y-%m-%d %H:%M:%S %z"
    else
        date -d "${utc} UTC"
    fi
}
to_utc() {
    curr=${1:-$(date +"%Y-%m-%d %H:%M:%S %z")}
    if [[ $(uname) = 'Darwin' ]] ; then
        TZ=UTC date -jf "%Y-%m-%d %H:%M:%S %z" "${curr}" +"%Y-%m-%d %H:%M:%S %z"
    else
        date +"%Y-%m-%d %H:%M:%S %z" -u
     fi
}
from_epoch() {
    [[ $# -lt 1 ]] && echo "$FUNCNAME \"epoch_time_in_ms\"" && return 1
    epoch="${1}"
    if [[ $(uname) = 'Darwin' ]] ; then
        TZ=UTC date -r "$((${epoch}/1000))"
    else
        TZ=UTC date -d "${utc}"
    fi
}
mdless() {
    if [[ $(uname) = 'Darwin' ]] ; then
        pandoc -s -f markdown -t man ${1:-README.md} | groff -T utf8 -man | less
    fi
}
bcurl() {
    if [[ $(uname) = 'Darwin' ]] ; then
        /usr/local/opt/curl/bin/curl $@
    fi
}
gtr() {
    if which gawk &>/dev/null; then
        gawk -f <(curl -Ls git.io/translate) -- -shell
    fi
}
reformat() {
    [[ $# -lt 1 ]] && echo "$FUNCNAME filename" && return 1
    cat ${1} | sed 's/\x1b\[[0-9;]*m//g'
}
tabtitle() {
    PRELINE="\r\033[A"
    random_color() {
        echo -e "\033]6;1;bg;red;brightness;$((1 + $RANDOM % 255))\a"$PRELINE
        echo -e "\033]6;1;bg;green;brightness;$((1 + $RANDOM % 255))\a"$PRELINE
        echo -e "\033]6;1;bg;blue;brightness;$((1 + $RANDOM % 255))\a"$PRELINE
    }
    echo -ne "\033]0;"$*"\007"
    random_color
}
newtab() {
    if [[ $(uname) = 'Darwin' ]] ; then
        [[ -n ${2} && -d ${2} ]] && newtab_dir=${2} || newtab_dir=~/Downloads
        osascript \
            -e 'tell application "iTerm2" to tell current window to set newWindow to (create tab with default profile)'\
            -e "tell application \"iTerm2\" to tell current session of newWindow to write text \"tabtitle ${1}\""\
            -e "tell application \"iTerm2\" to tell current session of newWindow to write text \"cd ${newtab_dir}\""
    fi
}
jqcat() {
    if command -v pygmentize >/dev/null ; then
        jq -r . < "$1" | pygmentize -l json
    else
        jq -r . < "$1"
    fi
}
alias jqcopy='jq -r . | pbcopy'
camel_to_snake() {
  local s=$1
  local result=""
  for ((i=0; i<${#s}; i++)); do
    char=${s:$i:1}
    if [[ $char =~ [A-Z] && $i != 0 ]]; then
      result+="_"
    fi
    result+=${char,,}
  done
  echo "$result"
}

### Java
# Function to switch JDK versions
function setjdk() {
    echo "Select the java version you wish to switch to from the following:"
    echo
    options=()
    count=-1

        while IFS= read -r line
        do
            if [[ ! "$line" == M* ]] && [[ ! "$line" == /* ]] && [[ ! -z "$line" ]]; then
                options+=("$line")
                ((count++))
                echo '['"$count"']'${options["$count"]}
            fi
        done < <(/usr/libexec/java_home -V 2>&1)

    echo
    read -p "Please chose a value from the options above: " selectedOption </dev/tty

    if [ "$count" -ge "$selectedOption" ] && [ "$selectedOption" -ge '0' ]; then
        removeFromPath '/System/Library/Frameworks/JavaVM.framework/Home/bin'
        removeFromPath "$JAVA_HOME/bin"
        stringArray=(${options["$selectedOption"]})
        export JAVA_HOME="${stringArray[@]: -1}"
        export PATH="$JAVA_HOME"/bin:$PATH
        echo "JAVA_HOME is set to be ${JAVA_HOME}"
    else
        echo "Invalid option, JAVA_HOME was not set"
    fi
}

function removeFromPath() {
  export PATH=$(echo $PATH | sed -E -e "s;:$1;;" -e "s;$1:?;;")
}
