### Databricks
alias awsc='aws --profile aws-cust-test1_databricks-power-user'
alias databricksaz='databricks --profile azure'
alias databrickse2='databricks --profile e2'
alias databricksg='databricks --profile genie'
alias databricksd='databricks --debug'
alias dbfsaz='dbfs --profile azure'
alias dbfse2='dbfs --profile e2'
alias dbfsg='dbfs --profile genie'
alias claude='~/universe/devtools/ai/llm agent session'
alias llm='~/universe/devtools/ai/llm'
add_genie_cfg() {
    if [[ $# -lt 2 ]] ; then
        echo "$FUNCNAME host token [generate-postman-config (true|false)]" && return 1
    else
        genie_host="${1}"
        genie_host="${genie_host#*://}"
        genie_host="${genie_host%/}"
        genie_token="${2}"
        curr_host=$(grep -A1 genie $HOME/.databrickscfg | awk '/host/ {print $NF}')
        curr_token=$(grep -A2 genie $HOME/.databrickscfg | awk '/token/ {print $NF}')
        sed -i.bak "s,${curr_host},https://${genie_host},;s,${curr_token},${genie_token}," $HOME/.databrickscfg
        if [[ "xtrue" == "x${3}" ]] ; then
            postman_id=$(uuidgen | tr 'A-Z' 'a-z')
            cat >> $HOME/Downloads/genie.postman_env.json <<EOF
{
 "id": "${postman_id}",
 "name": ".genie",
 "values": [
  {
   "key": "host",
   "value": "${genie_host}",
   "enabled": true
  },
  {
   "key": "token",
   "value": "${genie_token}",
   "enabled": true,
   "type": "secret"
  }
 ],
 "_postman_variable_scope": "environment"
}
EOF
            echo "Import $HOME/Downloads/genie.postman_env.json to Postman"
        fi
    fi
}
convert_logs() {
    if [[ $# -lt 1 ]] ; then
        echo "$FUNCNAME csv_file [..]" && return 1
    else
        while [[ -n "${1}" ]] ; do
            c=${1}
            if [[ -e ${c} && ${c: -4} == ".csv" ]] ; then
                l=$(basename ${c} .csv).log
                cat ${c} | cut -d, -f2- | gsed 's/^\"//;s/\"$//;s/\"\"/\"/g' > ${l}
                gsed -i '1d;/^$/d' ${l}
                echo "Converted to ${l}"
            else
                echo "${c} must exist and be a CSV file" && return 1
            fi
            shift
        done
    fi
}
gen_trace() {
    # echo "0$((${RANDOM}%2))-$(uuidgen | tr -d '-')-$(uuidgen | tr -d '-' | cut -c1-16)-0$((${RANDOM}%2))" | tr '[A-Z]' '[a-z]'
    echo "00-$(uuidgen | tr -d '-')-$(uuidgen | tr -d '-' | cut -c1-16)-01" | tr '[A-Z]' '[a-z]'
}
get_workspace_region() {
    [[ $# -lt 1 ]] && echo "$FUNCNAME workspace_id [..]" && return 1
    while [[ -n "${1}" ]] ; do
        o=${1}
        new="adb-${o}.$(( ${o} % 20 )).azuredatabricks.net"
        c=$(host ${new} | tail -1 | awk '{print $1}')
        r="${c%%.*}"
        echo "${o} : ${r//-/}"
        shift
    done
}
bigEmoji() { 
    local inner=$(echo "$1" | tr -d ':' | sed 's/./&+/g;s/+$//'); 
    local result=$(for i in {0..3}; do for j in {0..3}; do printf ":___b+i+g___%s___%d-%d:" "$inner" "$j" "$i"; done; echo; done); 
    echo "$result" | (if command -v pbcopy &> /dev/null; then pbcopy; else xclip -selection clipboard; fi); 
    echo "BigEmoji copied to clipboard. Or use this:" >&2; 
    echo "$result" 
}
jira_assign() {
   [[ $# -le 1 ]] && echo "$FUNCNAME ticket [..]" && return 1
   while [[ -n "${1}" ]] ; do
      jira issue assign ${1} $(jira me)
      shift
   done
}
jira_open() {
   [[ $# -ne 1 ]] && echo "$FUNCNAME ticket" && return 1
   open https://databricks.atlassian.net/browse/${1}
}
alias ji='jira_open'
alias jl='jira issue list'
alias ja='jira_assign'
